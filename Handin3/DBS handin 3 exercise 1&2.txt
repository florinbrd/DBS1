/* Exercise 1-1 */
create table log_works_on (
   id serial not null ,
   essn CHAR (9) NOT NULL,
   pno INTEGER NOT NULL,
   whours INTEGER,
   day_time time with time zone,
   CONSTRAINT log_works_on_pkey PRIMARY KEY (id)
);

create or replace function log_works_on() returns trigger as $BODY$
    begin
        if(tg_op = 'INSERT') then
            insert into  log_works_on (essn, pno, whours, day_time)
            values (new.ESSN, new.PNO, new.HOURS, now());
            return new;
        end if;
        if(tg_op = 'UPDATE') then
            insert into log_works_on(essn , pno, whours, day_time)
            values (new.ESSN, new.PNO, new.HOURS, now());
            return new;
        end if;
        if(tg_op = 'DELETE') then
            insert into log_works_on(essn , pno, whours, day_time)
            values (old.ESSN, old.PNO, old.HOURS, now());
            return old;
        end if;
        return null;
    end;
    $BODY$ language plpgsql;

create  trigger log_insert
    before INSERT on WORKS_ON for each row
    execute procedure log_works_on();

create trigger log_update
    before UPDATE on WORKS_ON for each row
    execute procedure log_works_on();

create trigger log_delete
    after DELETE on WORKS_ON for each row
    execute procedure log_works_on();


/* Exercise 1-2 */

create or replace function max5_func() returns trigger as $BODY$
	declare
		count_project integer;
	begin
		select count(*) into count_project from PROJECT
		where DNUM = new.DNUM;
		if count_project >= 5 then
		raise exception 'Max 5 projects per department';
		end if;
		return new;
	end;
$BODY$ language plpgsql;

create trigger max5
before insert on PROJECT for each row
execute procedure max5_func();

/* Exercise 1-3 */

create or replace function workson_exception() returns trigger as $BODY$
declare count_employee integer;
begin
select count(essn) into count_employee from works_on where essn = new.essn;
if count_employee >= 4 then raise exception 'Employee assigned to more than 4 projects';
end if;
return new;
end;

$BODY$ language plpgsql;

create trigger workson_rule before insert or update on works_on for each row
execute procedure workson_exception();

/* Exercise 1-4 */
CREATE TABLE log
(
log_id serial NOT NULL,
log_time time with time zone,
description character varying,
CONSTRAINT log_pkey PRIMARY KEY (log_id)
);



CREATE OR REPLACE FUNCTION log_for_department()
  RETURNS trigger AS $BODY$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        INSERT INTO log(
                log_time,
                description)
            VALUES(
                now(),
                'New department added,' || ' Department number: ' || new.dnumber || ', Department name: ' || new.dname || ', Manager SSN: ' || new.mgrssn || ', Manager start date: ' || new.mgrstartdate);
        RETURN NEW;

    ELSIF (TG_OP = 'DELETE') THEN
            INSERT INTO log(
                log_time,
                description)
            VALUES(
                now(),
                'Department deleted,' || ' Department number: ' || old.dnumber || ', Department name: ' || old.dname || ', Manager SSN: ' || old.mgrssn || ', Manager start date: ' || old.mgrstartdate);
            RETURN OLD;

    END IF;

    RETURN null;
END;
$BODY$
  LANGUAGE plpgsql;

CREATE TRIGGER trigger_log
BEFORE INSERT OR UPDATE OR DELETE
ON DEPARTMENT
FOR EACH ROW
EXECUTE PROCEDURE log_for_department();

/* Exercise 2-5 */

create view exerciseTwo_Five as
select * from works_on;

select * from exerciseTwo_Five;

/* Exercise 2-6 */

create view exerciseTwo_Six as
select sum(hours), PNO 
from works_on
group by PNO;

select * from exerciseTwo_Six;

/* Exercise 2-7 */

create view W_Data (id, fname, pno, pname, Hours, Cost )
    as select e.SSN,e.FNAME, p.PNUMBER, p.PNAME, w.HOURS, w.HOURS * 300
from employee e, project p, works_on w where e.SSN = w.ESSN and e.DNO = p.DNUM;

/* Exercise 2-8 */

create view W_Mgm (DEPT_Name, MGR_Name, MGR_Salary)
as select d.DNAME, e.FNAME, e.SALARY from EMPLOYEE e, DEPARTMENT d
where e.SSN = d.MGRSSN;

/* Exercise 2-9 */

create view W_Dep_Res (EMP_Name, SUP_Name, EMP_Salary) as select e.fname, c.fname, e.salary from EMPLOYEE c, EMPLOYEE e inner join  DEPARTMENT d on e.DNO = d.DNUMBER where DNAME = 'Research'
and d.mgrssn = c.ssn;

/* Exercise 2-10 */

create view Project_Department_Employee(projectName, departmentName, numOfEmployees, totalHoursPerWeek) as select
p.PNAME, d.DNAME, count(e), sum(HOURS) from PROJECT p, DEPARTMENT d, EMPLOYEE e, WORKS_ON w
where p.DNUM = d.DNUMBER and e.DNO = p.DNUM and p.PNUMBER = w.PNO and e.SSN = w.ESSN
group by p.PNAME, d.DNAME;

/* Exercise 2-11 */

create view Project_Department_Employee_2(projectName, departmentName, numOfEmployees, totalHoursPerWeek) as select
p.PNAME, d.DNAME, count(e), sum(HOURS) from PROJECT p, DEPARTMENT d, EMPLOYEE e, WORKS_ON w
where p.DNUM = d.DNUMBER and e.DNO = p.DNUM and p.PNUMBER = w.PNO and e.SSN = w.ESSN
group by p.PNAME, d.DNAME having count(e) > 1;

/* Exercise 2-12 */
create view supervisor as select e.fname, e.lname from Employee e where e.superssn ='888665555';

/* Exercise 2-13 */
create view department_info as select d.dname, count(e.ssn)
from Employee e inner join Department d on d.dnumber = e.dno group by d.dname having avg(e.salary) > 30000.00;

/* Exercise 2-14 */

create view exerciseTwo_14 as
select count(essn) as Worker_count, sum(hours) as total_hours, pno
from project inner join works_on on project.pnumber = works_on.pno
group by pno;

select * from exerciseTwo_14;